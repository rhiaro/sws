{"name":"Semantic Web Systems resources","tagline":"Notes and resources for Semantic Web Systems course (Uni of Ed, Semester 2, 2015)","body":"### Linked Data 101\r\n\r\n#### 1. Data structure: Triples\r\n\r\n**Triples** are almost-human-readable statements, made up of [subject, predicate, object]. When you put lots of triples together and there is overlap in subjects and objects, the form a **graph**; subjects and objects are nodes (circles), and predicates are arcs (lines).\r\n\r\n1.1. A **subject** is what the statement is about. The thing a statement is about is represented by a unique identifier: a **URI** (see 2).\r\n\r\n1.2. A **predicate** is a property of the subject, essentially an adjective.\r\n\r\n1.3. An **object** is the value of the property. This can be just a plain string or number (a literal), or a class, or a URI for another thing.\r\n\r\n1.4. So to turn the sentence \"my name is Amy\" into triple form, you see the subject is *you*, a human; the predicate (property) is \"name\" and the object (the value) is the string \"Amy\": \r\n\r\n```\r\n<some-identifier-for#amy> name \"Amy\" .\r\n```\r\n\r\n#### 2. Identifiers: URIs\r\n\r\nURIs are **unique identifiers**, necessary so we can talk about lots of things, and distinguish them from each other.\r\n\r\n2.1. They are *globally* unique (supposedly) across the whole web. So if someone at a University wants to publish data about *Scotland* and someone in Government wants to publish data about *Scotland* they can use the same URI, and know that they are both referring to the same Scotland (and they can say different things about Scotland and their data can be collated). In reality this is a bit more challenging because people don't like to cooperate, but don't worry about that.\r\n\r\n2.2. URIs look like URLs. They are based on **http** because they're supposed to be resolvable with a web browser. ie. You're supposed to be able to type them in and get something back to tell you about what it is the URI is for. Because you often can't get the thing itself (because people, places and objects can't travel over http...) we can add a bit to the URL that doesn't get sent to the server: a **fragment**, eg. ```#something``` - on the end. This just denotes that we're trying to talk about a *thing* not a *webpage about a thing* (the webpage about a thing is addressed by the URL without the #fragment). An alternative to fragments is **content negotiation** which is fun, but don't worry about right now.\r\n\r\n2.3. **Anyone** can create a URI. It can be anything you like, but it helps if it will make sense to other people. It also helps if you have control over the domain name, so that you can decide what shows up when someone types it into a browser. We write URIs in ```<triangle brackets>``` to make them easier to recognise. So with that in mind, we can change ```<some-identifier-for#amy>``` to ```<http://homepages.inf.ed.ac.uk/s1158216/#amy>```, and we can say: ```<http://homepages.inf.ed.ac.uk/s1158216/#amy> name \"Amy\".```\r\n\r\n2.3.a) If you don't own a domain name and don't want to let that stand in your way, you can make one up. ```http://example.com/``` is always good, or ```http://vocab.inf.ed.ac.uk/sws/```.\r\n\r\n#### 3. Ontologies\r\n\r\n**Vocabularies** or ontologies are a set of words and phrases that someone has decided to put together for the purposes of describing a particular topic. They usually consist of ```classes``` and ```properties```. \r\n\r\n3.1. **Classes** are used to say that `<some-thing>` is of type `<other-thing>`. Eg. `<http://http://homepages.inf.ed.ac.uk/s1158216/#amy> type <Person>.` (`Person` is the class). Classes start with an uppercase letter.\r\n\r\n3.2. **Properties** are just the describing words. In the previous example `type` is the property, and before that `name` was the property. Properties are camelCased.\r\n\r\n3.3. **Anyone can publish** a vocabulary, and you can use vocabularies that anyone else has published. There are literally thousands out there on the web, some better than others..\r\n\r\n3.3.a) There are well-known, **stable** vocabularies. Examples include: **RDF** and **RDFS** (which provide the basics for describing anything), **FOAF** (for describing people and their friends), **Dublin Core** (for describing publications, mostly).\r\n\r\n3.4 Vocabulary terms can have loose or restrictive definitions; you can define rules in **OWL** for how terms are used.\r\n\r\n3.5. You **create a new vocabulary term** (whether a class or a property) by deciding what you want it to say and publishing it on a webpage, with a description, and a URI that (theoretically) won't change. If you can't/won't publish your term at a URI, you can just do the deciding part. You could pretend you've published it at `http://vocab.inf.ed.ac.uk/sws/my-vocab-term`, and then go ahead and use it. They *don't* need to dereference to be useable (that's just good practice).\r\n3.6. It's always best to **see if a vocabulary term exists** before you make your own. So for the previous examples, I know that in the RDF ontology there's a `type` property, and in the FOAF ontology there's a `Person` class and a `name` property:\r\n\r\n```\r\n<http://homepages.inf.ed.ac.uk/s1158216/#amy> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <xmlns.com/foaf/0.1/Person> .\r\n<http://homepages.inf.ed.ac.uk/s1158216/#amy> <http://xmlns.com/foaf/0.1/name> \"Amy\" .\r\n```\r\n\r\n3.6.a) Because URIs are long and annoying to type out, we use prefixes to make things easier to read (prefixes can be anything you like, too):\r\n\r\n```\r\n    @prefix foaf: http://xmlns.com/foaf/0.1/ .\r\n    @prefix rdf: http://www.w3.org/1999/02/22-rdf-syntax-ns# .\r\n    @prefix id: http://http://homepages.inf.ed.ac.uk/s1158216/# .\r\n\r\n    <id:amy> rdf:type <foaf:Person> .\r\n    <id:amy> foaf:name \"Amy\" .\r\n```\r\n\r\n#### 4. Publishing (technologies, tools, techniques)\r\n\r\nWatch this space... Maybe out of scope for this document.\r\n\r\n#### So when it comes to creating an RDF dataset:\r\n\r\n1. Figure out what it is you want to talk about. The person/place/object/concept/etc.\r\n2. Find out if someone has already said something about the same thing. If so, what unique identifier - URI - did they use? (Hint: dbpedia has everything on Wikipedia, and their URIs are most commonly used). If not, just make your own, with your own URI base (eg. http://vocab.inf.ed.ac.uk/sws/).\r\n3. Figure out what property of the thing you want to describe. Name/colour/size/latitude/life expectancy...\r\n4. Figure out if someone has tried to describe this property already. If so, they have a vocabulary term for it, which will look like http://some-website.com/vocab/some-term. Use it! Literally just by copying the address out. If not... make your own. Same as 2.\r\n5. Figure out what the value of the property of the thing is. Bob/blue/20m/-5.6/60 years...\r\n6. See 2. Same principle, but for many things there's not much point in having a URI for them. Use an existing URI or create a new one if you think it's necessary. If it's just a string or a number (or a date/time or whatever) then use a *literal* which is just the value in \"quotes\".\r\n7. Parse your dataset - using the tool or programming language or library of your choice - to extract the subject (1.), the predicate (3.) and the object (5.) and store them in a file in triple form.\r\n\r\n### Useful links / reading\r\n\r\nTo be updated\r\n\r\n### Practice excercises\r\n\r\nTo be updated\r\n\r\n### Contact\r\n\r\n* Found a typo? Want to fix a mistake? Pull request!\r\n* Something doesn't make sense at all or needs more explaining, or questions about SWS coursework? Email Amy.Guy@ed.ac.uk.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}